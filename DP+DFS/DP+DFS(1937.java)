package boj;

import java.awt.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.StringTokenizer;

public class JUN1937 {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;
    static StringBuilder sb = new StringBuilder();
    static int n, answer = 0, maxVal = 0;
    static int[][] a, dp;
    static final int[] dx ={0,1,0,-1};
    static final int[] dy ={1,0,-1,0};

    static void input() throws IOException {
        n = Integer.parseInt(br.readLine());
        a = new int[n][n];
        dp = new int[n][n];
        for (int i = 0; i < n; ++i) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < n; ++j) {
                a[i][j] = Integer.parseInt(st.nextToken());
            }
        }
    }

    //메인 로직
    //int를 통해서 dp[x][y]에 기존 값 또는 직전의 값(dfs를 통해 얻은) 중 최댓값을 택하도록 한다.
    //탑 다운 방식이라는 점 또한 알아두면 좋다.
  
    static int dfs(int x, int y){
        if(dp[x][y] > 0) return dp[x][y];
        dp[x][y] = 1;
        for (int dir = 0; dir < 4; ++dir) {
            int nx = x + dx[dir];
            int ny = y + dy[dir];
            if(nx < 0 || ny < 0 || nx >= n || ny >= n) continue;
            if(a[x][y] >= a[nx][ny]) continue;
            dp[x][y] = Math.max(dp[x][y], dfs(nx, ny) + 1);
        }
        return dp[x][y];
    }

    static void solution() {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                answer = Math.max(answer, dfs(i, j));
            }
        }
        System.out.println(answer);
    }

    public static void main(String[] args) throws IOException {
        input();
        solution();
    }

}
