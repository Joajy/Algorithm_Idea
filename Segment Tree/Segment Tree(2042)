#include<iostream>
using namespace std;
#define MAX 1'000'001
#define ll long long

ll arr[MAX];
ll tree[MAX << 2];
int n, m, k, a, b;
ll c;

ll init(int st, int en, int node) {
	if (st == en) return tree[node] = arr[st];
	int mid = (st + en) >> 1;
	return tree[node] = init(st, mid, node << 1) + init(mid + 1, en, (node << 1) + 1);
}

//init과 유사한 로직
ll update(int st, int en, int node, int index, ll tmp) {
	if (index < st || index > en) return tree[node];
	if (st == en) return tree[node] = tmp;
	int mid = (st + en) >> 1;
	return tree[node] = update(st, mid, node << 1, index, tmp) + update(mid + 1, en, (node << 1) + 1, index, tmp);
}

//st, en : 시작 및 끝 인덱스 / left, right : 구간의 합 구하고자 하는 범위
ll sum(int st, int en, int left, int right, int node) {
	if (left > en || right < st) return 0;
	if (left <= st && en <= right) return tree[node];
	int mid = (st + en) >> 1;
	return sum(st, mid, left, right, node << 1) + sum(mid + 1, en, left, right, (node << 1) + 1);
}

int main() {
	cin.tie(0), cout.tie(0), ios_base::sync_with_stdio(0);
	cin >> n >> m >> k;
	for (int i = 1; i <= n; i++) cin >> arr[i];
	init(1, n, 1);
	for (int i = 0; i < m + k; i++) {
		cin >> a >> b >> c;
		if (a == 1)
			update(1, n, 1, b, c);
		else if (a == 2)
			cout << sum(1, n, b, c, 1) << '\n';
	}
	return 0;
}
