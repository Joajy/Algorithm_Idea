#include <iostream>
#include <map>
#include <vector>
using namespace std;

class trie {
private:
	map<string, trie*> m;
public:
	void insert(vector<string>& v, int index) {
		//모든 vector(v)의 원소들을 소진했을 경우
		if (v.size() == index) return;

		//찾는 원소가 없을 경우
		if (m.find(v[index]) == m.end()) {
			m.insert({ v[index], new trie() });
			m[v[index]]->insert(v, index + 1);
		}
		//찾는 원소가 있을 경우
		else
			m[v[index]]->insert(v, index + 1);
	}

	void find(int depth) {
		for (auto iter : m) {
			for (int i = 0; i < depth; i++)
				cout << "--";
			cout << iter.first << '\n';

			iter.second->find(depth + 1);
		}
	}
};

trie* root = new trie;
int n, cnt;

int main() {
	cin.tie(0);
	ios::sync_with_stdio(0);
	cin >> n;
	int cnt;
	string str;
	for (int i = 0; i < n; i++) {
		cin >> cnt;
		vector<string> v(cnt);
		for (int j = 0; j < cnt; j++)
			cin >> v[j];
		root->insert(v, 0);
	}
	root->find(0);
	return 0;
}
